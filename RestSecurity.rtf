{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 vulnerabilities of gateway, breach firewall, \
\
prevent attacker from reaching API Management server. think about security Every touch point \
\
Mobile API\
-firewall to protect datas\
-API could be attacked , attacker can steal,manipulate, identity theft, Dof service attacks\
Authenticate incoming calls\
Basic , token based and key/secret authentication\
transaction are authorized by end customer-OAuth\
-Data in Rest is protected\
\

\b Basic Authentication
\b0 : Consumer send the credentials to the server in HTTP header in base 64 encrypted format. Format: User:Password. Server decoded the value in the header and checks the user and password. If HTTP is used then credentials are sent in plain text format visible to anyone so basic authentication should be done using HTTPS(Man in Middle attacks). Basic authentication may require crews to be passed overtime\
\

\b Token Based Authentication:
\b0 \
\
JWT-Json web token\
/token/\{credentials\}- validate creds, issue a token save in storage\
token should be applied in all calls, receiving server should validate token everytime. Avoid hardcoding credentials \
\
token is encoded string, api need not store in session can be sent in req header, query or request body. Issuer can decide the validity, expiry etc\
\
JWT- 3 PARTS header.payload.signature\
header base 64 encoding consist of type and hashing, payload 64, signature hash of payload and header with secret\
\

\b API Keys and secret (public data can be fetched not based on specific user)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0 if want to use API from google or walmart  -need to register, after successful registration will provide key and secret- meant for m/c(user and password meant for humans). Long random string
\b \
\

\b0 key-identifies API consumer(Client key/id)
\b \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0 \
API secret- used by client to prove its identity(password in basic authentication or signature can use this secret)\
\
instead of credentials can send key+digital signatures, Server has the secret stored for every key so it will be able to crack and validate the signature.\
\
key can be used for authentication, create token, 
\b rate limiting
\b0  if too many calls are made then send an error:429, analytics not to implement in api code->leverage api management platform\
without writing code in APIs\
\

\b OAuth 2
\b0 \
\
Gmail data of customer to be used by another app, another app does not get a grant since data belong to customer. other app get authorization from customer then access data from gmail providing the proof of authorization\
\
based on tokens, 3 component- user, provider with authorization and user/resource api server, application/client\
\

\b application
\b0  sends 
\b authorization request
\b0  to 
\b user
\b0  and gets an 
\b authorization grant
\b0 . \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 application 
\b0 sends
\b  authorization grant
\b0  to 
\b resource/api server 
\b0 and gets
\b  access token \
\
application 
\b0 can then use the 
\b token
\b0  to request 
\b resource/user
\b0  info from  
\b resource/api server\
\
\

\b0 access token has an expiry set by issuer, can use refresh token as well\
\
\pard\pardeftab720\sl360\partightenfactor0

\f1\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Refresh token may be used for generating a new access token\
\

\b Functional Attacks\
(sqlfiddle.com- schema)\
SQL injection
\b0 : form based api. attacker can insert sql code in from data.\

\b Fuzzing attack: 
\b0 attacker sends random input and gets some error they analyze the response to check vulnerabilities. make sure API doesn\'92t return sql exceptions as is\

\b Cross site Forgery: 
\b0 attacker sends link to user clicking runs scripts\
(owasp)- use POST instead of GET, ADD Custom headers\
\

\b Token and session hijacking:\

\b0 hack user token through scripts. Way to protect is ensure token expiry.\
complex token pattern , don\'92t just rely on token use additional security header.\
\

\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Consider using API Gateway or API management solution\
\
}